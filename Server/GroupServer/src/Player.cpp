/* Generated by Together */
#include "stdafx.h"
#include "excp.h"
#include "DataSocket.h"
#include "GroupServerApp.h"
#include "Player.h"
#include "Team.h"
#include "GameCommon.h"

_DBC_USING

Player::Player(uLong size) : PreAllocStru(size)
{
}

void Player::Initially()
{
	RunBiDirectItem<Player>::Initially();
	GuildMember::Initially();
	TeamMember::Initially();
	//ToDo:Self's Init Operation

	m_lastip[0]		=1;
	m_lastreason[0]	=1;
	m_lastleavetime[0] =1;
	m_pingply		=0;

	m_gm		=0;
	m_gate		=0;
	m_gtAddr	=0;
	m_bp_currcha=-1;
	m_currcha	=-1;
	m_chanum	=0;
	m_acctid	=0;
	m_acctLoginID = 0;
	m_acctname	="";
	m_chatnum	=0;
	m_chatarranum	=0;

	m_bWG = false;
	m_bCheat = false;
	m_bRefreshFlag = false;
	m_lChatMoney = 1000;
	m_lTradeChatMoney = 1000;
	m_bNew = false;
	bCanReceiveRequests = true;
	
	std::fill(std::begin(m_guildPermission), std::end(m_guildPermission), 0);
	
	EndPlayReset();
}
void Player::Finally()
{
	m_gate		=0;
	m_gtAddr	=0;
	m_bp_currcha=-1;
	m_currcha	=-1;
	m_chanum	=0;
	m_acctid	=0;
	m_acctLoginID = 0;
	m_acctname	="";
	m_chatnum	=0;
	m_chatarranum	=0;

	m_lChatMoney = 1000;
	m_lTradeChatMoney = 1000;
	m_bNew = false;
	bCanReceiveRequests = true;

	//-----------
	TeamMember::Finally();
	GuildMember::Finally();
	RunBiDirectItem<Player>::Finally();
}
bool Player::BeginRun()
{
	return	RunBiDirectItem<Player>::_BeginRun(&(g_gpsvr->m_plylst))?true:false;
}
bool Player::EndRun()
{
	return RunBiDirectItem<Player>::_EndRun()?true:false;
}

void Player::EndPlay(DataSocket *datasock)
{
	if(m_currcha >=0)
	{
		g_gpsvr->DelPlayerFromList(m_chaid[m_currcha]);

		CountEstopTime();
		if(GetTeam())
		{
			RPacket l_rpk1;
			g_gpsvr->CP_TEAM_LEAVE(this,datasock,l_rpk1);
		}
		if(m_chatarranum)
		{
			WPacket l_wpk1	=g_gpsvr->GetWPacket();
			auto const selock = std::lock_guard{m_mtxChat};
			while(m_chatarranum)
			{
				WPacket l_wpk2 =l_wpk1; // error here (calls WPacket operator=)
				l_wpk2.WriteLong(m_chat[0]->GetSession()->GetID());
				auto rpkt = RPacket(l_wpk2);
				g_gpsvr->CP_SESS_LEAVE(this,datasock,rpkt);
			}
		}
		if (Guild* guild = GetGuild(); guild)
		{
			constexpr auto arr_size{ 300 };
			if (guild->GetTotal() <= arr_size)
			{
				WPacket l_toGuild = g_gpsvr->GetWPacket();
				l_toGuild.WriteCmd(CMD_PC_GUILD);
				l_toGuild.WriteChar(MSG_GUILD_OFFLINE);
				l_toGuild.WriteLong(m_chaid[m_currcha]);

				std::array<Player*, arr_size> l_plylst;
				size_t l_plynum{};

				RunChainGetArmor<GuildMember> l(*guild);
				while (auto l_ply = static_cast<Player*>(GetGuild()->GetNextItem()))
				{
					if (l_ply != this)
					{
						l_plylst[l_plynum] = l_ply;
						++l_plynum;
					}
				}
				l.unlock();
				g_gpsvr->SendToClient(l_plylst.data(), l_plynum, l_toGuild);
			}

			LeaveGuild();
		}
		{
			auto const l_lockDB = std::lock_guard{g_gpsvr->m_mtxDB};
			g_gpsvr->m_tblcharaters->SetAddr(m_chaid[m_currcha],0);
			--(g_gpsvr->m_curChaNum);

			//Friends offline notification
			{
				friend_dat l_farray[200];
				int l_num{ std::size(l_farray) };
				g_gpsvr->m_tblX1->get_friend_dat(l_farray,l_num,m_chaid[m_currcha]);

				WPacket	l_toFrnd =g_gpsvr->GetWPacket();
				l_toFrnd.WriteCmd(CMD_PC_FRND_REFRESH);
				l_toFrnd.WriteChar(MSG_FRND_REFRESH_OFFLINE);
				l_toFrnd.WriteLong(m_chaid[m_currcha]);

				std::array<Player*, std::size(l_farray)> l_plylst;
				size_t l_plynum{};

				Player* l_ply1; char l_currcha;
				for (auto i = 0; i < l_num; ++i)
				{
					if (l_farray[i].atorID
						&& (l_ply1 = ToPointer<Player>(l_farray[i].memaddr))
						&& ((l_currcha = l_ply1->m_currcha) >= 0)
						&& (l_ply1->m_chaid[l_currcha] == l_farray[i].atorID)
						)
					{
						l_plylst[l_plynum] = l_ply1;
						++l_plynum;
					}
				}
				g_gpsvr->SendToClient(l_plylst.data(), l_plynum, l_toFrnd);
			}

			{
				TBLMaster::master_dat l_farray[200];
				int l_num{ std::size(l_farray) };
				g_gpsvr->m_tblmaster->GetMasterData(l_farray,l_num,m_chaid[m_currcha]);

				WPacket	l_toFrnd =g_gpsvr->GetWPacket();
				l_toFrnd.WriteCmd(CMD_PC_MASTER_REFRESH);
				l_toFrnd.WriteChar(MSG_PRENTICE_REFRESH_OFFLINE);
				l_toFrnd.WriteLong(m_chaid[m_currcha]);

				std::array<Player*, std::size(l_farray)> l_plylst;
				size_t l_plynum{};

				Player* l_ply1; char l_currcha;
				for (auto i = 0; i < l_num; ++i)
				{
					if(l_farray[i].atorID
						&& (l_ply1 = ToPointer<Player>(l_farray[i].memaddr))
						&&((l_currcha =l_ply1->m_currcha)>=0)
						&&(l_ply1->m_chaid[l_currcha] ==l_farray[i].atorID))
					{
						l_plylst[l_plynum] = l_ply1;
						++l_plynum;
					}
				}
				g_gpsvr->SendToClient(l_plylst.data(), l_plynum, l_toFrnd);
				m_CurrMasterNum = 0;
			}
			
			{
				TBLMaster::master_dat l_farray[200];
				int l_num{ std::size(l_farray) };
				g_gpsvr->m_tblmaster->GetPrenticeData(l_farray,l_num,m_chaid[m_currcha]);

				WPacket	l_toFrnd =g_gpsvr->GetWPacket();
				l_toFrnd.WriteCmd(CMD_PC_MASTER_REFRESH);
				l_toFrnd.WriteChar(MSG_MASTER_REFRESH_OFFLINE);
				l_toFrnd.WriteLong(m_chaid[m_currcha]);

				std::array<Player*, std::size(l_farray)> l_plylst;
				size_t l_plynum{};

				Player* l_ply1; char l_currcha;
				for (auto i = 0; i < l_num; ++i)
				{
					if(l_farray[i].atorID
						&&(l_ply1 =ToPointer<Player>(l_farray[i].memaddr))
						&&((l_currcha =l_ply1->m_currcha)>=0)
						&&(l_ply1->m_chaid[l_currcha] ==l_farray[i].atorID))
					{
						l_plylst[l_plynum] = l_ply1;
						l_plynum++;
					}
				}
				g_gpsvr->SendToClient(l_plylst.data(), l_plynum, l_toFrnd);
				m_CurrPrenticeNum = 0;
			}
		}

		if (m_gm > 0)
		{
			WPacket	wpk = g_gpsvr->GetWPacket();
			wpk.WriteCmd(CMD_PC_GM_INFO);
			wpk.WriteChar(MSG_FRND_REFRESH_DEL);
			wpk.WriteLong(m_chaid[m_currcha]);
			g_gpsvr->SendToAllClients(wpk);
		}
	}
}


//NOTE(Ogge): Called when a client is in-game, and want to switch character
void Player::EndPlayReset()
{
	m_refuse_tome	=false;
	m_refuse_sess	=false;
	m_worldtick	=0;
	m_tradetick	=0;
	m_worldticktemp = 0;
	m_tradeticktemp = 0;
	m_toyoutick	=0;
	//guild color cooldown mothannakh
	m_GuildColorTemp = 0;
	CHangePasswordCol = 0;	//change password cooldown client function mothannakh
}

char Player::FindIndexByChaName(cChar *chaname)
{
	if(!chaname)return -1;
	
	char i = 0; 
	for(;i<m_chanum;i++)
	{
		if(m_chaname[i] ==chaname)
			break;
	}
	if(i<m_chanum)
	{
		return i;
	}else
	{
		return -1;
	}
}
void Player::SendSysInfo(cChar	*info)
{
	if(m_currcha <0 || !m_gate ||!m_gate->GetDataSock())return;
	WPacket l_wpk	=m_gate->GetDataSock()->GetWPacket();
	l_wpk.WriteCmd(CMD_MC_SYSINFO);
	l_wpk.WriteString(info);
	g_gpsvr->SendToClient(this,l_wpk);
}

extern BOOL GetOnlineCount( DWORD& dwLoginNum, DWORD& dwPlayerNum );

void Player::DoCommand(cChar *cmd)
{
	if(!strcmp(cmd ,"getlastconnection"))
	{
		if (auto const l_lockDB = std::lock_guard{g_gpsvr->m_mtxDB}; m_lastip[0] == 1)
		{
			g_gpsvr->m_tblaccounts->FetchRowByActID(m_acctid);
			strcpy(m_lastip,g_gpsvr->m_tblaccounts->GetLast_IP());
			strcpy(m_lastreason,g_gpsvr->m_tblaccounts->GetDisc_Reason());
			strcpy(m_lastleavetime,g_gpsvr->m_tblaccounts->GetLast_Leave());
		}
		//SendSysInfo(dstring("��?��?��???IP:")<<m_lastip<<";��?��????a��??����?����??/?-����:"<<m_lastleavetime<<"/"<<m_lastreason);
		char l_buf[512];
		sprintf(l_buf,RES_STRING(GP_PLAYER_CPP_00001),m_lastip,m_lastleavetime,m_lastreason);
		SendSysInfo(l_buf);
	}else if(!strncmp(cmd,"userconnection ",strlen("userconnection ")))
	{
		Player	*l_ply	=g_gpsvr->FindPlayerByChaName(cmd +strlen("userconnection "));
		if(!l_ply)
		{
			//SendSysInfo(dstring("��??��??")<<cmd +strlen("getuserconnection ") <<"??�̡�?��2??��??��?");
			char l_buf[512];
			sprintf(l_buf,RES_STRING(GP_PLAYER_CPP_00002),cmd +strlen("userconnection "));
			SendSysInfo(l_buf);
		}else
		{
			if (auto const l_lockDB = std::lock_guard{g_gpsvr->m_mtxDB}; l_ply ->m_lastip[0] == 1)
			{
				g_gpsvr->m_tblaccounts->FetchRowByActID(l_ply->m_acctid);
				strcpy(l_ply->m_lastip,g_gpsvr->m_tblaccounts->GetLast_IP());
				strcpy(l_ply->m_lastreason,g_gpsvr->m_tblaccounts->GetDisc_Reason());
				strcpy(l_ply->m_lastleavetime,g_gpsvr->m_tblaccounts->GetLast_Leave());
			}
			//SendSysInfo(dstring("??")<<cmd +strlen("getuserconnection ")<<"??��?��?��???IP:"<<l_ply->m_lastip<<";��?��????a��??����?����??/?-����:"<<l_ply->m_lastleavetime<<"/"<<l_ply->m_lastreason);
			char l_buf[512];
			sprintf(l_buf,RES_STRING(GP_PLAYER_CPP_00003),cmd +strlen("userconnection "), l_ply->m_lastip,l_ply->m_lastleavetime,l_ply->m_lastreason);
			SendSysInfo(l_buf);
		}
	}else if(!strcmp(cmd ,"TotalOn"))
	{
		Player	*l_ply	=g_gpsvr->FindPlayerByChaName(m_chaname[m_currcha].c_str());

		if(l_ply)
		{
			if(l_ply->m_gm > 0)
			{
				auto const l_lockDB = std::lock_guard{g_gpsvr->m_mtxDB};
				DWORD dwLoginNum = DWORD(g_gpsvr->m_plylst.GetTotal());
				DWORD dwPlayerNum  = DWORD(g_gpsvr->m_curChaNum);
				if( GetOnlineCount( dwLoginNum, dwPlayerNum ) )
				{
					//SendSysInfo(dstring("�̡�?���???/��??����??����y��o")<<dwLoginNum<<"/"<<dwPlayerNum);
					char l_buf[512];
					sprintf(l_buf,RES_STRING(GP_PLAYER_CPP_00004),dwLoginNum,dwPlayerNum);
					SendSysInfo(l_buf);
				}
			}
		}
	}else if(!strncmp(cmd ,"pingx ",strlen("pingx ")))
	{
		Player	*l_ply	=g_gpsvr->FindPlayerByChaName(cmd +strlen("pingx "));
		if(!l_ply)
		{
			//SendSysInfo(dstring("��??��??")<<cmd +strlen("ping ") <<"??�̡�?��2??��??��?");
			char l_buf[512];
			sprintf(l_buf,RES_STRING(GP_PLAYER_CPP_00005),cmd +strlen("pingx "));
			SendSysInfo(l_buf);
		}else
		{
			l_ply->m_pingply	=this;

			WPacket	l_wpk		=g_gpsvr->GetWPacket();
			l_wpk.WriteCmd(CMD_PC_PING);
			g_gpsvr->SendToClient(l_ply,l_wpk);
		}
	}else if(!strncmp(cmd,"bbsx ",strlen("bbsx ")))
	{
		if(m_gm)
		{
			char	*	l_dim;
			cChar	*	l_cmd	=cmd+strlen("bbsx ");
			l_dim	= (char*)strchr(l_cmd,',');
			//if(!l_dim)SendSysInfo("bbs??��?:@@ bbs [?????��10??],[��?��y],[?����Y]");
			if(!l_dim)SendSysInfo(RES_STRING(GP_PLAYER_CPP_00006));
			*l_dim=0;
			uLong	l_inter	=atoi(l_cmd);
			//if(!l_inter)SendSysInfo("????��?D?>1");
			if(!l_inter)SendSysInfo(RES_STRING(GP_PLAYER_CPP_00007));
			l_cmd	=l_dim+1;
			l_dim	= (char*)strchr(l_cmd,',');
			//if(!l_dim)SendSysInfo("bbs??��?:@@ bbs [?????��10??],[��?��y],[?����Y]");
			if(!l_dim)SendSysInfo(RES_STRING(GP_PLAYER_CPP_00006));
			*l_dim=0;
			uLong	l_times	=atoi(l_cmd);
			//if(!l_times)SendSysInfo("��?��y��?D?>1");
			if(!l_times)SendSysInfo(RES_STRING(GP_PLAYER_CPP_00008));
			l_cmd	=l_dim+1;
			//if(!strlen(l_cmd))SendSysInfo("?����Y3��?����?D?>0");
			if(!strlen(l_cmd))SendSysInfo(RES_STRING(GP_PLAYER_CPP_00009));

			g_gmbbs->AddBBS(l_inter,l_times,l_cmd);
		}else
		{
			//SendSysInfo("����?T2?��??��");
			SendSysInfo(RES_STRING(GP_PLAYER_CPP_00010));
		}
	}else if( !strncmp( cmd, "mutex", strlen("mutex") ) )
	{
		// ????��??��
		if( !this->m_gm ) 
		{
			//SendSysInfo( "????��D����?T��?" );
			SendSysInfo( RES_STRING(GP_PLAYER_CPP_00011) );
			return;
		}

		cChar* l_cmd = cmd + strlen( "mutex" );
		l_cmd = strchr( l_cmd, ' ' );
		//if( !l_cmd ) SendSysInfo( "??????��?��o@@ estop [��???????��???3?],[????����??�ꡧ�̣�??��??����?]" );
		if( !l_cmd ) SendSysInfo( RES_STRING(GP_PLAYER_CPP_00012) );
		cChar* l_plyname = ++l_cmd;
		l_cmd = strchr( l_cmd, ',' );
		//if( !l_cmd ) SendSysInfo( "??????��?��o@@ estop [��???????��???3?],[????����??�ꡧ�̣�??��??����?]" );
		if( !l_cmd ) SendSysInfo( RES_STRING(GP_PLAYER_CPP_00012)  );
		*const_cast<char*>(l_cmd) = 0;
		uLong lTimes = atoi( ++l_cmd );
		EstopPlayer( l_plyname, lTimes );
		
	}else if( !strncmp( cmd, "unmutex", strlen( "unmutex" ) ) )
	{		
		// ????��??��
		if( !this->m_gm ) 
		{
			//SendSysInfo( "????��D����?T��?" );
			SendSysInfo(RES_STRING(GP_PLAYER_CPP_00011) );
			return;
		}

		cChar* l_cmd = cmd + strlen( "mutex" );
		l_cmd = strchr( l_cmd, ' ' );
		//if( !l_cmd ) SendSysInfo( "?a3y??????��?��o@@ delestop [��???????��???3?]" );
		if( !l_cmd ) SendSysInfo( RES_STRING(GP_PLAYER_CPP_00013) );
		cChar* l_plyname = ++l_cmd;
		DelEstopPlayer( l_plyname );

	}else if( !strncmp( cmd, "kickx", strlen("kickx") ) )
	{
		if( !this->m_gm ) 
		{
			//SendSysInfo( "????��D����?T��?" );
			SendSysInfo(RES_STRING(GP_PLAYER_CPP_00011));
			return;
		}

		// ?����?????��??��o?
		cChar* l_cmd = cmd + strlen( "mutex" );
		l_cmd = strchr( l_cmd, ' ' );
		//if( !l_cmd ) SendSysInfo( "?����???��??��o???��?��o@@ disable [��??����???��???3?]" );
		if( !l_cmd ) SendSysInfo( RES_STRING(GP_PLAYER_CPP_00014) );
		cChar* l_plyname = ++l_cmd;
		l_cmd = strchr( l_cmd, ',' );
		//if( !l_cmd ) SendSysInfo( "?����???��??��o???��?��o@@ disable [��??����???��???3?]" );
		if( !l_cmd ) SendSysInfo( RES_STRING(GP_PLAYER_CPP_00014) );
		*const_cast<char*>(l_cmd) = 0;
		uLong lTimes = atoi( ++l_cmd );
		DisablePlayer( l_plyname, lTimes );
		
	}else
	{
		//SendSysInfo("2??��3?��??����??��");
		SendSysInfo(RES_STRING(GP_PLAYER_CPP_00015));
	}
}

bool Player::IsEstop()
{
	if( !m_estop[m_currcha] ) return false;
	uLong	l_curtick	=g_gpsvr->GetCurrentTick();
	if( l_curtick - this->m_worldtick > 1000*60*2 )
	{
		auto const l_lockDB = std::lock_guard{g_gpsvr->m_mtxDB};
		if( !g_gpsvr->m_tblcharaters->IsEstop( m_chaid[m_currcha] ) )
		{
			// ����?��?a3y?����?
			WPacket l_wpk	=g_gpsvr->GetWPacket();
			l_wpk.WriteCmd(CMD_PT_DEL_ESTOPUSER);
			g_gpsvr->SendToClient(this,l_wpk);

			//SendSysInfo( "????��?��??a3y��?" );
			SendSysInfo( RES_STRING(GP_PLAYER_CPP_00016) );

			CountEstopTime();
			m_estop[m_currcha] = false;			
			return false;
		}
		else
		{
			m_estop[m_currcha] = true;
			return true;
		}
	}
	return true;
}

void Player::CheckEstop()
{
	auto const l_lockDB = std::lock_guard{g_gpsvr->m_mtxDB};
	g_gpsvr->m_tblcharaters->StartEstopTime( m_chaid[m_currcha] );
	if( g_gpsvr->m_tblcharaters->IsEstop( m_chaid[m_currcha] ) )
	{
		// ����?��???????��o��?����?
		WPacket l_wpk	=g_gpsvr->GetWPacket();
		l_wpk.WriteCmd(CMD_PT_ESTOPUSER);
		g_gpsvr->SendToClient(this,l_wpk);

		//SendSysInfo( "??��??-��??�̨�3????��?" );
		SendSysInfo( RES_STRING(GP_PLAYER_CPP_00017) );

		m_estop[m_currcha] = true;
		m_worldtick = g_gpsvr->GetCurrentTick();
	}
}

void Player::CountEstopTime()
{
	auto const l_lockDB = std::lock_guard{g_gpsvr->m_mtxDB};
	if( m_estop[m_currcha] ) g_gpsvr->m_tblcharaters->EndEstopTime( m_chaid[m_currcha] );
}

void Player::DelEstopPlayer( cChar* plyname )
{
	if (!IsValidName(plyname, strlen(plyname))){
		return;
	}
	Player* ply = g_gpsvr->FindPlayerByChaName( plyname );
	if( ply )
	{
		// ??��??��??????
		ply->m_estop[ply->m_currcha] = false;
	}

	// ��y?Y?a2������
	auto const l_lockDB = std::lock_guard{g_gpsvr->m_mtxDB};
	if( !g_gpsvr->m_tblcharaters->DelEstop( plyname ) )
	{
		char szData[128];
		//sprintf( szData, "?a3y??????��???%s?��2?��??����?", plyname );
		sprintf( szData, RES_STRING(GP_PLAYER_CPP_00018), plyname );
		SendSysInfo( szData );
		return;
	}
	else
	{
		char szData[128];
		//sprintf( szData, "?a3y??��???%s?��????2������3��1|��?", plyname );
		sprintf( szData, RES_STRING(GP_PLAYER_CPP_00019), plyname );
		SendSysInfo( szData );

		char szTemp[128];
		//sprintf( szTemp, "??��??-��?GM??%s?��?a3y????��?", m_chaname[m_currcha].c_str() );
		sprintf( szTemp, RES_STRING(GP_PLAYER_CPP_00020), m_chaname[m_currcha].c_str() );
		ply->SendSysInfo( szTemp );

		// ����?��?????����?
		WPacket l_wpk	=g_gpsvr->GetWPacket();
		l_wpk.WriteCmd(CMD_PT_DEL_ESTOPUSER);
		g_gpsvr->SendToClient(ply,l_wpk);

		LogLine l_line(g_LogGrpServer);
		//l_line<<newln<<"??��?["<<m_chaname[m_currcha]<<"]?a3y????plyname:["<<ply->m_chaname[ply->m_currcha]<<"]"<<endln;
		l_line<<newln<<"char["<<m_chaname[m_currcha]<<"]may speak plyname:["<<ply->m_chaname[ply->m_currcha]<<"]"<<endln;
	}
}

void Player::EstopPlayer( cChar* plyname, uLong lTimes )
{
	if (!IsValidName(plyname, strlen(plyname))){
		return;
	}

	Player* ply = g_gpsvr->FindPlayerByChaName( plyname );
	if( ply )
	{
		// Mute character in-memory
		ply->m_estop[ply->m_currcha] = true;
	}
	
	// Save character mute in database
	auto const l_lockDB = std::lock_guard{g_gpsvr->m_mtxDB};
	if( !g_gpsvr->m_tblcharaters->Estop( plyname, lTimes ) )
	{
		char szData[128];
		//sprintf( szData, "??????��???%s?��2?��??����?", plyname );
		sprintf( szData, RES_STRING(GP_PLAYER_CPP_00023), plyname );
		SendSysInfo( szData );
		return;
	}
	else
	{
		char szData[128];
		sprintf( szData, RES_STRING(GP_PLAYER_CPP_00024), plyname, lTimes );
		SendSysInfo( szData );

		if (ply)
		{
			char szTemp[128];
			sprintf(szTemp, RES_STRING(GP_PLAYER_CPP_00025), m_chaname[m_currcha].c_str(), lTimes);
			ply->SendSysInfo(szTemp);
		}

		// ����?��?????����?
		WPacket l_wpk	=g_gpsvr->GetWPacket();
		l_wpk.WriteCmd(CMD_PT_ESTOPUSER);
		g_gpsvr->SendToClient(ply,l_wpk);

		LogLine l_line(g_LogGrpServer);
		l_line<<newln<<"char ["<<m_chaname[m_currcha]<<"] can't speack plyname:["<<ply->m_chaname[ply->m_currcha]<<"]"<<lTimes<<"minute"<<endln;
	}
}

void Player::DisablePlayer( cChar* plyname, uLong lTimes )
{
	// ?����???��?
	Player* ply = g_gpsvr->FindPlayerByChaName( plyname );
	if( ply )
	{
		ply->EndPlay(m_gate->GetDataSock());
		if(ply->EndRun())
		{
			//?��AccountServer����?��?����???��??����?
			WPacket l_wpk = g_gpsvr->GetWPacket();
			l_wpk.WriteCmd(CMD_PA_USER_BILLEND);
			l_wpk.WriteString(ply->m_acctname.c_str());
			g_gpsvr->SendData(g_gpsvr->m_acctsock,l_wpk);

			//?��AccountServer����?��Disable?����?
			l_wpk	=g_gpsvr->GetWPacket();
			l_wpk.WriteCmd(CMD_PA_USER_DISABLE);
			l_wpk.WriteLong(ply->m_acctLoginID);
			l_wpk.WriteLong(lTimes);
			g_gpsvr->SendData(g_gpsvr->m_acctsock,l_wpk);
			
			//?��GateServer����?����?��??����?
			l_wpk	=g_gpsvr->GetWPacket();
			l_wpk.WriteCmd(CMD_AP_KICKUSER);
			g_gpsvr->SendToClient(ply,l_wpk);

			char szData[128];
			//sprintf( szData, "?����???��???%s?��?��o?2������3��1|��?", plyname );
			sprintf( szData, RES_STRING(GP_PLAYER_CPP_00028), plyname );
			SendSysInfo( szData );

			//��?��?3��1|
			LogLine l_line(g_LogGrpServer);
			//l_line<<newln<<"?����?��?acctid/acctname:["<<ply->m_acctid<<"]/["<<ply->m_acctname<<"],2��?��??��??��??��?��?????!"<<endln;
			l_line<<newln<<"screen acctid/acctname:["<<ply->m_acctid<<"]/["<<ply->m_acctname<<"],kill the player!"<<endln;
		}
		ply->Free();
	}
	else
	{
		int cha_accid;
		if( !g_gpsvr->m_tblcharaters->FetchAccidByChaName( plyname, cha_accid ) )
		{
			char szData[128];
			//sprintf( szData, "?����???��???%s?��2?��??����?", plyname );
			sprintf( szData, RES_STRING(GP_PLAYER_CPP_00031), plyname );
			SendSysInfo( szData );
			return;
		}
		else
		{
			//?��AccountServer����?��Disable?����?
			WPacket l_wpk	=g_gpsvr->GetWPacket();
			l_wpk.WriteCmd(CMD_PA_USER_DISABLE);
			l_wpk.WriteLong(m_acctLoginID);			
			l_wpk.WriteLong(lTimes);
			g_gpsvr->SendData(g_gpsvr->m_acctsock,l_wpk);

			char szData[128];
			//sprintf( szData, "?����???��???%s?��?��o?2������3��1|��?", plyname );
			sprintf( szData, RES_STRING(GP_PLAYER_CPP_00032), plyname );
			SendSysInfo( szData );

			//��?��?3��1|
			LogLine l_line(g_LogGrpServer);
			//l_line<<newln<<"��?��?��????����?��?acctid/plyname:["<<cha_accid<<"]/["<<plyname<<"]��??����?!"<<endln;
			l_line<<newln<<"recieve screen acctid/plyname:["<<cha_accid<<"]/["<<plyname<<"]command!"<<endln;
		}
	}	
}